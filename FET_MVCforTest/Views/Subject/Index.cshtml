@model IEnumerable<SubjectViewModel>
@using FET_MVCforTest.Data
@inject AppDbContext _context

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Subjects";
}

<style>
    .subjects-container {
        max-width: 1200px;
        margin: 2rem auto;
        padding: 0 20px;
    }

    .page-header {
        text-align: center;
        margin-bottom: 3rem;
    }

    .page-title {
        font-size: 2.2rem;
        font-weight: 700;
        margin-bottom: 1rem;
        background: linear-gradient(135deg, #5a7df5, #8e5ee0);
        -webkit-background-clip: text;
        background-clip: text;
        color: transparent;
    }

    .subjects-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1.5rem;
    }

    .subject-card {
        background: #ffffff;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
        height: 100%;
        border: 1px solid #f0f0f0;
        position: relative;
        z-index: 1;
        transform: translateZ(0);
    }

        .subject-card:hover {
            transform: translateY(-10px) scale(1.05);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.25);
            z-index: 10;
        }

        .subject-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            border-radius: 12px;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3);
            opacity: 0;
            transition: opacity 0.3s ease;
            pointer-events: none;
            z-index: -1;
        }

        .subject-card:hover::before {
            opacity: 1;
        }

    .card-header {
        padding: 1.5rem;
        background: linear-gradient(135deg, #5a7df5, #8e5ee0);
        color: white;
        text-align: center;
    }

    .subject-name {
        font-size: 1.3rem;
        font-weight: 600;
        margin-bottom: 0.3rem;
        color: #ffffff;
    }

    .card-body {
        padding: 1.5rem;
        background: #fafafa;
    }

    .subject-details {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .detail-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #444;
    }

    .department-badge {
        display: inline-block;
        margin: 0.5rem 0;
        padding: 0.35rem 0.75rem;
        background-color: #f8f9fa;
        border-radius: 50px;
        font-size: 0.9rem;
        border: 1px solid #dee2e6;
    }

    .card-footer {
        padding: 1rem 1.5rem;
        border-top: 1px solid #eaeaea;
        text-align: center;
        background: #f8f8f8;
        display: flex;
        justify-content: center;
        gap: 0.5rem;
    }

    .action-btn {
        padding: 0.5rem 1rem;
        border-radius: 50px;
        font-weight: 600;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 0.3rem;
    }

    .edit-btn {
        background: transparent;
        border: 2px solid #5a7df5;
        color: #5a7df5;
    }

        .edit-btn:hover {
            background: #5a7df5;
            color: white;
        }

    .delete-btn {
        background: transparent;
        border: 2px solid #e74c3c;
        color: #e74c3c;
    }

        .delete-btn:hover {
            background: #e74c3c;
            color: white;
        }

    /* Dark Mode */
    body.dark-mode .subject-card {
        background: #2d3748;
        border-color: #374151;
    }

    body.dark-mode .card-header {
        background: linear-gradient(135deg, #4b6cb7, #182848);
    }

    body.dark-mode .card-body {
        background: #1f2937;
    }

        body.dark-mode .card-body .detail-item {
            color: #e5e7eb;
        }

    body.dark-mode .department-badge {
        background-color: #333;
        border-color: #444;
        color: #f8f9fa;
    }

    body.dark-mode .card-footer {
        border-top: 1px solid #4a5568;
        background: #1a202c;
    }

    body.dark-mode .subject-card::before {
        box-shadow: 0 25px 50px rgba(0, 0, 0, 0.5);
    }

    /* Search and Back to Top */
    .search-container {
        max-width: 600px;
        margin: 0 auto 2rem;
        position: relative;
    }

    .search-input {
        width: 100%;
        padding: 12px 20px;
        padding-left: 45px;
        border-radius: 50px;
        border: 2px solid #e0e0e0;
        font-size: 1rem;
        transition: all 0.3s ease;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
        background: #ffffff;
    }

        .search-input:focus {
            border-color: #5a7df5;
            box-shadow: 0 4px 15px rgba(90, 125, 245, 0.25);
            outline: none;
        }

    .search-icon {
        position: absolute;
        left: 15px;
        top: 50%;
        transform: translateY(-50%);
        color: #666;
    }

    .back-to-top {
        position: fixed;
        bottom: 30px;
        right: 30px;
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background: linear-gradient(135deg, #5a7df5, #8e5ee0);
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        cursor: pointer;
        transition: all 0.3s ease;
        z-index: 99;
        opacity: 0;
        visibility: hidden;
    }

        .back-to-top.show {
            opacity: 1;
            visibility: visible;
        }

        .back-to-top:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
        }

    .back-btn-container {
        margin-bottom: 2rem;
    }

    body.dark-mode .search-input {
        background: #2d3748;
        border-color: #4a5568;
        color: #e2e8f0;
    }

    body.dark-mode .search-icon {
        color: #a0aec0;
    }

    body.dark-mode .back-to-top {
        background: linear-gradient(135deg, #4b6cb7, #182848);
    }

    /* Animations */
    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .animate-card {
        animation: fadeIn 0.5s ease-out forwards;
        opacity: 0;
    }

        .animate-card:nth-child(1) {
            animation-delay: 0.1s;
        }

        .animate-card:nth-child(2) {
            animation-delay: 0.2s;
        }

        .animate-card:nth-child(3) {
            animation-delay: 0.3s;
        }

        .animate-card:nth-child(4) {
            animation-delay: 0.4s;
        }

        .animate-card:nth-child(5) {
            animation-delay: 0.5s;
        }
</style>

<div class="subjects-container">
    <div class="back-btn-container">
        <a href="@Url.Action("Index", "Home")" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-left"></i> Back to Dashboard
        </a>
    </div>

    <div class="page-header">
        <h1 class="page-title">Subjects Management</h1>
        <p class="text-muted">Manage all subjects and their departments</p>
    </div>

    <div class="search-container">
        <i class="bi bi-search search-icon"></i>
        <input type="text" id="searchInput" class="search-input" placeholder="Search by subject name...">
    </div>

    <div class="d-flex justify-content-center mb-4">
        <a href="@Url.Action("Create")" class="btn btn-primary">
            <i class="bi bi-plus-circle me-1"></i> Add New Subject
        </a>
    </div>

    @if (TempData["Operation"] != null)
    {
        <partial name="View"></partial>
    }

    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger animate__animated animate__shakeX">@TempData["Error"]</div>
    }

    <div class="subjects-grid" id="subjectsGrid">
        @foreach (var subject in Model)
        {
            var department = _context.Departments.FirstOrDefault(d => d.Id == subject.DepartmentId);

            <div class="subject-card animate-card" data-name="@subject.Name.ToLower()">
                <div class="card-header">
                    <h3 class="subject-name">@subject.Name</h3>
                </div>
                <div class="card-body">
                    <div class="subject-details">
                        @if (department != null)
                        {
                            <div class="detail-item">
                                <i class="bi bi-building"></i>
                                <span>Department: <span class="department-badge">@department.Name</span></span>
                            </div>
                        }
                        else
                        {
                            <div class="detail-item">
                                <i class="bi bi-exclamation-triangle text-danger"></i>
                                <span class="text-danger">No Department Assigned</span>
                            </div>
                        }
                    </div>
                </div>
                <div class="card-footer">
                    <a href="@Url.Action("Edit", new { id = subject.Id })" class="action-btn edit-btn">
                        <i class="bi bi-pencil"></i> Edit
                    </a>
                    <button type="button" class="action-btn delete-btn" data-bs-toggle="modal" data-bs-target="#DeleteModal-@subject.Id">
                        <i class="bi bi-trash"></i> Delete
                    </button>
                </div>
            </div>

            <!-- Delete Modal -->
            <div class="modal fade" id="DeleteModal-@subject.Id" tabindex="-1" aria-labelledby="DeleteModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content rounded-3">
                        <div class="modal-header">
                            <h5 class="modal-title">
                                <i class="bi bi-exclamation-triangle-fill text-danger me-2"></i>
                                Confirm Subject Deletion
                            </h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <p>Are you sure you want to delete the following subject?</p>
                            <div class="bg-light p-3 rounded mb-3">
                                <h5 class="fw-bold">@subject.Name</h5>
                                @if (department != null)
                                {
                                    <p class="mb-1"><i class="bi bi-building me-1"></i>Department: @department.Name</p>
                                }
                                <p class="text-danger mb-0"><i class="bi bi-exclamation-circle-fill me-1"></i>This action cannot be undone!</p>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                                <i class="bi bi-x-circle me-1"></i> Cancel
                            </button>
                            <form asp-action="Delete" asp-route-id="@subject.Id" method="post">
                                <button type="submit" class="btn btn-danger">
                                    <i class="bi bi-trash-fill me-1"></i> Confirm Delete
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<div class="back-to-top" id="backToTop">
    <i class="bi bi-arrow-up"></i>
</div>

@section Scripts {
    <script>
        // Search functionality
        const searchInput = document.getElementById('searchInput');
        const subjectCards = document.querySelectorAll('.subject-card');

        searchInput.addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase();

            subjectCards.forEach(card => {
                const name = card.getAttribute('data-name');

                if (name.includes(searchTerm)) {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
        });

        // Back to top button
        const backToTop = document.getElementById('backToTop');

        window.addEventListener('scroll', function() {
            if (window.pageYOffset > 300) {
                backToTop.classList.add('show');
            } else {
                backToTop.classList.remove('show');
            }
        });

        backToTop.addEventListener('click', function() {
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        });
    </script>
}